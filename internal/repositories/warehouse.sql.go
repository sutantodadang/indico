// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: warehouse.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertWarehouse = `-- name: InsertWarehouse :exec
INSERT INTO i_warehouses(warehouse_id, name, capacity) VALUES($1, $2, $3)
`

type InsertWarehouseParams struct {
	WarehouseID pgtype.UUID `db:"warehouse_id" json:"warehouse_id"`
	Name        string      `db:"name" json:"name"`
	Capacity    int32       `db:"capacity" json:"capacity"`
}

func (q *Queries) InsertWarehouse(ctx context.Context, arg InsertWarehouseParams) error {
	_, err := q.db.Exec(ctx, insertWarehouse, arg.WarehouseID, arg.Name, arg.Capacity)
	return err
}

const selectWarehouses = `-- name: SelectWarehouses :many
SELECT warehouse_id, name, capacity FROM i_warehouses
`

type SelectWarehousesRow struct {
	WarehouseID pgtype.UUID `db:"warehouse_id" json:"warehouse_id"`
	Name        string      `db:"name" json:"name"`
	Capacity    int32       `db:"capacity" json:"capacity"`
}

func (q *Queries) SelectWarehouses(ctx context.Context) ([]SelectWarehousesRow, error) {
	rows, err := q.db.Query(ctx, selectWarehouses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectWarehousesRow
	for rows.Next() {
		var i SelectWarehousesRow
		if err := rows.Scan(&i.WarehouseID, &i.Name, &i.Capacity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
