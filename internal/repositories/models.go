// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repositories

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TypeOrder string

const (
	TypeOrderRECEIVE TypeOrder = "RECEIVE"
	TypeOrderSHIP    TypeOrder = "SHIP"
)

func (e *TypeOrder) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TypeOrder(s)
	case string:
		*e = TypeOrder(s)
	default:
		return fmt.Errorf("unsupported scan type for TypeOrder: %T", src)
	}
	return nil
}

type NullTypeOrder struct {
	TypeOrder TypeOrder `json:"type_order"`
	Valid     bool      `json:"valid"` // Valid is true if TypeOrder is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTypeOrder) Scan(value interface{}) error {
	if value == nil {
		ns.TypeOrder, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TypeOrder.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTypeOrder) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TypeOrder), nil
}

func (e TypeOrder) Valid() bool {
	switch e {
	case TypeOrderRECEIVE,
		TypeOrderSHIP:
		return true
	}
	return false
}

func AllTypeOrderValues() []TypeOrder {
	return []TypeOrder{
		TypeOrderRECEIVE,
		TypeOrderSHIP,
	}
}

type UserRole string

const (
	UserRoleADMIN UserRole = "ADMIN"
	UserRoleSTAFF UserRole = "STAFF"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

func (e UserRole) Valid() bool {
	switch e {
	case UserRoleADMIN,
		UserRoleSTAFF:
		return true
	}
	return false
}

func AllUserRoleValues() []UserRole {
	return []UserRole{
		UserRoleADMIN,
		UserRoleSTAFF,
	}
}

type IOrder struct {
	OrderID     pgtype.UUID        `db:"order_id" json:"order_id"`
	UserID      pgtype.UUID        `db:"user_id" json:"user_id"`
	ProductID   pgtype.UUID        `db:"product_id" json:"product_id"`
	Quantity    int32              `db:"quantity" json:"quantity"`
	OrderType   TypeOrder          `db:"order_type" json:"order_type"`
	OrderStatus int32              `db:"order_status" json:"order_status"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type IProduct struct {
	ProductID  pgtype.UUID        `db:"product_id" json:"product_id"`
	Sku        string             `db:"sku" json:"sku"`
	Name       string             `db:"name" json:"name"`
	Quantity   int32              `db:"quantity" json:"quantity"`
	LocationID pgtype.UUID        `db:"location_id" json:"location_id"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type IUser struct {
	UserID    pgtype.UUID        `db:"user_id" json:"user_id"`
	FullName  string             `db:"full_name" json:"full_name"`
	Email     string             `db:"email" json:"email"`
	Password  string             `db:"password" json:"password"`
	RoleID    pgtype.UUID        `db:"role_id" json:"role_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type IUsersRole struct {
	UserRoleID pgtype.UUID        `db:"user_role_id" json:"user_role_id"`
	UniqueName UserRole           `db:"unique_name" json:"unique_name"`
	Name       string             `db:"name" json:"name"`
	Status     bool               `db:"status" json:"status"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type IWarehouse struct {
	WarehouseID pgtype.UUID        `db:"warehouse_id" json:"warehouse_id"`
	Name        string             `db:"name" json:"name"`
	Capacity    int32              `db:"capacity" json:"capacity"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}
