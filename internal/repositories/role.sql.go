// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertRole = `-- name: InsertRole :exec
INSERT INTO i_users_roles (user_role_id, unique_name, name) VALUES($1, $2, $3)
`

type InsertRoleParams struct {
	UserRoleID pgtype.UUID `db:"user_role_id" json:"user_role_id"`
	UniqueName UserRole    `db:"unique_name" json:"unique_name"`
	Name       string      `db:"name" json:"name"`
}

func (q *Queries) InsertRole(ctx context.Context, arg InsertRoleParams) error {
	_, err := q.db.Exec(ctx, insertRole, arg.UserRoleID, arg.UniqueName, arg.Name)
	return err
}

const selectOneUserByRoleId = `-- name: SelectOneUserByRoleId :one
SELECT user_role_id, unique_name, name, status FROM i_users_roles WHERE user_role_id = $1
`

type SelectOneUserByRoleIdRow struct {
	UserRoleID pgtype.UUID `db:"user_role_id" json:"user_role_id"`
	UniqueName UserRole    `db:"unique_name" json:"unique_name"`
	Name       string      `db:"name" json:"name"`
	Status     bool        `db:"status" json:"status"`
}

func (q *Queries) SelectOneUserByRoleId(ctx context.Context, userRoleID pgtype.UUID) (SelectOneUserByRoleIdRow, error) {
	row := q.db.QueryRow(ctx, selectOneUserByRoleId, userRoleID)
	var i SelectOneUserByRoleIdRow
	err := row.Scan(
		&i.UserRoleID,
		&i.UniqueName,
		&i.Name,
		&i.Status,
	)
	return i, err
}

const selectRoles = `-- name: SelectRoles :many
SELECT user_role_id, unique_name, name, status FROM i_users_roles
`

type SelectRolesRow struct {
	UserRoleID pgtype.UUID `db:"user_role_id" json:"user_role_id"`
	UniqueName UserRole    `db:"unique_name" json:"unique_name"`
	Name       string      `db:"name" json:"name"`
	Status     bool        `db:"status" json:"status"`
}

func (q *Queries) SelectRoles(ctx context.Context) ([]SelectRolesRow, error) {
	rows, err := q.db.Query(ctx, selectRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectRolesRow
	for rows.Next() {
		var i SelectRolesRow
		if err := rows.Scan(
			&i.UserRoleID,
			&i.UniqueName,
			&i.Name,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
